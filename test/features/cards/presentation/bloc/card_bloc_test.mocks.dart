// Mocks generated by Mockito 5.4.6 from annotations
// in cardpro/test/features/cards/presentation/bloc/card_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cardpro/core/error/failures.dart' as _i6;
import 'package:cardpro/features/cards/domain/entities/card_instance.dart'
    as _i10;
import 'package:cardpro/features/cards/domain/entities/card_with_instance.dart'
    as _i7;
import 'package:cardpro/features/cards/domain/repositories/card_repository.dart'
    as _i2;
import 'package:cardpro/features/cards/domain/usecases/add_card.dart' as _i8;
import 'package:cardpro/features/cards/domain/usecases/delete_card.dart' as _i9;
import 'package:cardpro/features/cards/domain/usecases/edit_card.dart' as _i11;
import 'package:cardpro/features/cards/domain/usecases/edit_card_full.dart'
    as _i12;
import 'package:cardpro/features/cards/domain/usecases/get_cards.dart' as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCardRepository_0 extends _i1.SmartFake
    implements _i2.CardRepository {
  _FakeCardRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCards].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCards extends _i1.Mock implements _i4.GetCards {
  MockGetCards() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCardRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CardRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.CardWithInstance>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i7.CardWithInstance>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i7.CardWithInstance>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.CardWithInstance>>>);
}

/// A class which mocks [AddCard].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCard extends _i1.Mock implements _i8.AddCard {
  MockAddCard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCardRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CardRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CardWithInstance>> call(
    _i8.AddCardParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.CardWithInstance>>.value(
                  _FakeEither_1<_i6.Failure, _i7.CardWithInstance>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.CardWithInstance>>);
}

/// A class which mocks [DeleteCard].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCard extends _i1.Mock implements _i9.DeleteCard {
  MockDeleteCard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCardRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CardRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i10.CardInstance? instance) =>
      (super.noSuchMethod(
            Invocation.method(#call, [instance]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [instance]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [EditCard].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditCard extends _i1.Mock implements _i11.EditCard {
  MockEditCard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCardRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CardRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i11.EditCardParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [EditCardFull].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditCardFull extends _i1.Mock implements _i12.EditCardFull {
  MockEditCardFull() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCardRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CardRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
    _i12.EditCardFullParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
