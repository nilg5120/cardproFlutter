// Mocks generated by Mockito 5.4.6 from annotations
// in cardpro/test/features/cards/presentation/widgets/card_list_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:cardpro/features/cards/domain/usecases/add_card.dart' as _i3;
import 'package:cardpro/features/cards/domain/usecases/delete_card.dart' as _i4;
import 'package:cardpro/features/cards/domain/usecases/edit_card.dart' as _i5;
import 'package:cardpro/features/cards/domain/usecases/edit_card_full.dart'
    as _i6;
import 'package:cardpro/features/cards/domain/usecases/get_cards.dart' as _i2;
import 'package:cardpro/features/cards/presentation/bloc/card_bloc.dart' as _i7;
import 'package:cardpro/features/cards/presentation/bloc/card_event.dart'
    as _i9;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCards_0 extends _i1.SmartFake implements _i2.GetCards {
  _FakeGetCards_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddCard_1 extends _i1.SmartFake implements _i3.AddCard {
  _FakeAddCard_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteCard_2 extends _i1.SmartFake implements _i4.DeleteCard {
  _FakeDeleteCard_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEditCard_3 extends _i1.SmartFake implements _i5.EditCard {
  _FakeEditCard_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEditCardFull_4 extends _i1.SmartFake implements _i6.EditCardFull {
  _FakeEditCardFull_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCardState_5 extends _i1.SmartFake implements _i7.CardState {
  _FakeCardState_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CardBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardBloc extends _i1.Mock implements _i7.CardBloc {
  MockCardBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCards get getCards =>
      (super.noSuchMethod(
            Invocation.getter(#getCards),
            returnValue: _FakeGetCards_0(this, Invocation.getter(#getCards)),
          )
          as _i2.GetCards);

  @override
  _i3.AddCard get addCard =>
      (super.noSuchMethod(
            Invocation.getter(#addCard),
            returnValue: _FakeAddCard_1(this, Invocation.getter(#addCard)),
          )
          as _i3.AddCard);

  @override
  _i4.DeleteCard get deleteCard =>
      (super.noSuchMethod(
            Invocation.getter(#deleteCard),
            returnValue: _FakeDeleteCard_2(
              this,
              Invocation.getter(#deleteCard),
            ),
          )
          as _i4.DeleteCard);

  @override
  _i5.EditCard get editCard =>
      (super.noSuchMethod(
            Invocation.getter(#editCard),
            returnValue: _FakeEditCard_3(this, Invocation.getter(#editCard)),
          )
          as _i5.EditCard);

  @override
  _i6.EditCardFull get editCardFull =>
      (super.noSuchMethod(
            Invocation.getter(#editCardFull),
            returnValue: _FakeEditCardFull_4(
              this,
              Invocation.getter(#editCardFull),
            ),
          )
          as _i6.EditCardFull);

  @override
  _i7.CardState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCardState_5(this, Invocation.getter(#state)),
          )
          as _i7.CardState);

  @override
  _i8.Stream<_i7.CardState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i7.CardState>.empty(),
          )
          as _i8.Stream<_i7.CardState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i9.CardEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.CardEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.CardState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.CardEvent>(
    _i10.EventHandler<E, _i7.CardState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i10.Transition<_i9.CardEvent, _i7.CardState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i10.Change<_i7.CardState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
